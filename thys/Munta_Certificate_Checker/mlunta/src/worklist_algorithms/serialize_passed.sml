(* XXX: Remove ? *)
(* functor SerializePassed(D : DBM) : BINARY = struct *)
(* structure Ref = Unsynchronized *)
(* type from = (Location.key, D.t) PolyPassedSet.hash_table *)
(* type to = Word8Vector.vector *)
(* fun serialize_dbms dbms = map (D.serialize) dbms *)
(* fun single_state (discrete, dbms, acc) = *)
(*     let *)
(*       val len_dbms = length dbms |> SerInt.serialize *)
(*       val loc = Location.serialize discrete *)
(*     in *)
(*       serialize_dbms dbms *)
(*       |> cons len_dbms *)
(*       |> cons loc *)
(*       |> Word8Vector.concat *)
(*       |> flip cons acc *)
(*     end *)

(* fun serialize ht = *)
(*     let *)
(*       val kv_list = PolyPassedSet.kv_list ht *)
(*       val len = ht |> PolyPassedSet.n_buckets |> SerInt.serialize *)
(*       val single_states = PolyPassedSet.fold *)
(* 			      single_state [] ht *)
(*     in *)
(*       single_states |> cons len |> Word8Vector.concat *)
(*     end *)
(* end *)
